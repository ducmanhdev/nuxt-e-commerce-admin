// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id                  String               @id @default(uuid())
  name                String
  userId              String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  categories          Category[]
  brands              Brand[]
  products            Product[]
  orders              Order[]
  attributes          ProductAttribute[]
  voucher             Voucher[]
  variantOptions      VariantOption[]
  variantOptionValues VariantOptionValue[]
  news                News[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String                  @id @default(uuid())
  name          String
  description   String
  storeId       String
  store         Store                   @relation(fields: [storeId], references: [id])
  categoryId    String
  category      Category                @relation(fields: [categoryId], references: [id])
  brandId       String
  brand         Brand                   @relation(fields: [brandId], references: [id])
  status        Int
  orderItems    OrderItem[]
  newsDetails   NewsDetail[]
  bannerDetails BannerDetail[]
  attributes    ProductAttributeValue[]
  variants      ProductVariant[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model ProductAttribute {
  id        String                  @id @default(uuid())
  name      String
  storeId   String
  store     Store                   @relation(fields: [storeId], references: [id])
  values    ProductAttributeValue[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model ProductAttributeValue {
  id          String           @id @default(uuid())
  productId   String
  product     Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeId String
  attribute   ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductVariant {
  id                     String                         @id @default(uuid())
  productId              String
  product                Product                        @relation(fields: [productId], references: [id], onDelete: Cascade)
  price                  Decimal
  oldPrice               Decimal?
  stock                  Int
  sku                    String
  imageUrl               String?
  createdAt              DateTime                       @default(now())
  updatedAt              DateTime                       @updatedAt
  variantAttributeValues ProductVariantAttributeValue[]
}

model VariantOption {
  id        String               @id @default(uuid())
  name      String
  storeId   String
  store     Store                @relation(fields: [storeId], references: [id])
  values    VariantOptionValue[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model VariantOptionValue {
  id                     String                         @id @default(uuid())
  optionId               String
  option                 VariantOption                  @relation(fields: [optionId], references: [id], onDelete: Cascade)
  storeId                String
  store                  Store                          @relation(fields: [storeId], references: [id])
  value                  String
  createdAt              DateTime                       @default(now())
  updatedAt              DateTime                       @updatedAt
  variantAttributeValues ProductVariantAttributeValue[]
}

model ProductVariantAttributeValue {
  id            String             @id @default(uuid())
  variantId     String
  variant       ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValueId String
  optionValue   VariantOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model News {
  id        String       @id @default(uuid())
  storeId   String
  store     Store        @relation(fields: [storeId], references: [id])
  title     String
  imageUrl  String
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  details   NewsDetail[]
}

model NewsDetail {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  newsId    String
  news      News     @relation(fields: [newsId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String         @id @default(uuid())
  name      String
  imageUrl  String
  status    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  details   BannerDetail[]
}

model BannerDetail {
  id        String   @id @default(uuid())
  productId String
  bannerId  String
  product   Product  @relation(fields: [productId], references: [id])
  banner    Banner   @relation(fields: [bannerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  sessionId String?
  userId    Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  storeId     String
  store       Store       @relation(fields: [storeId], references: [id])
  orderItems  OrderItem[]
  totalPrice  Decimal
  isPaid      Boolean     @default(false)
  paymentType Int
  status      Int         @default(0)
  phone       String
  address     String
  voucher     Voucher?    @relation(fields: [voucherId], references: [id])
  voucherId   String?
  note        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voucher {
  id            String   @id @default(uuid())
  storeId       String
  store         Store    @relation(fields: [storeId], references: [id])
  code          String   @unique
  discountType  Int
  discountValue Decimal
  minOrderValue Decimal?
  maxDiscount   Decimal?
  status        Int
  usageLimit    Int?
  usedCount     Int      @default(0)
  startDate     DateTime
  endDate       DateTime
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
